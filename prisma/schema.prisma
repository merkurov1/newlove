// prisma/schema.prisma

// Блоки datasource и generator должны быть вверху и только один раз
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Далее идут все ваши модели ---

// Модели для NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // <<< ДОБАВЛЕНО: Роль для разграничения прав доступа (админ/пользователь)
  role          String    @default("USER")

  accounts      Account[]
  sessions      Session[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// Модель для сообщений чата
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    String
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

// Модель для новостных статей
model NewsArticle {
  id          Int      @id @default(autoincrement())
  title       String
  // <<< ДОБАВЛЕНО: Уникальный URL (slug) для красивых ссылок на статьи
  slug        String   @unique
  description String?  @db.Text
  url         String   @unique
  imageUrl    String?
  publishedAt DateTime
  sourceName  String
  createdAt   DateTime @default(now())
}
