// This block specifies the database connection.
// Replace "postgresql" with your database type if different (e.g., "mysql", "sqlite").
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This block tells Prisma to generate the Prisma Client for JavaScript/TypeScript.
generator client {
  provider = "prisma-client-js"
}

// --- DATA MODELS ---

// Models required for NextAuth.js Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  messages      Message[] // Back-relation to Message model
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Corrected model for messages
model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text // Field for the message content
  createdAt DateTime @default(now())

  // Relation to the User model
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model for news articles from external sources
model NewsArticle {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?  @db.Text
  url         String   @unique
  imageUrl    String?
  publishedAt DateTime
  sourceName  String
  createdAt   DateTime @default(now())
}

// Model for your regular publications
model Article {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articles")
}

// Model for projects/static pages
model Project {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}
