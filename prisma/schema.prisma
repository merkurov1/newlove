
// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
enum Role {
  USER
  ADMIN
  SUBSCRIBER
  PATRON
  PREMIUM
  SPONSOR
}

// --- DATA MODELS ---

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  username      String?   @unique
  bio           String?   @db.Text
  website       String?

  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  articles      Article[]
  projects      Project[]
  subscription  Subscriber?
  letters       Letter[]
  postcardOrders PostcardOrder[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsArticle {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?  @db.Text
  url         String   @unique
  imageUrl    String?
  publishedAt DateTime
  sourceName  String
  createdAt   DateTime @default(now())
  @@index([publishedAt])
}

model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text  // Явно указываем TEXT, а не JSONB
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  tags        Tag[]     // <-- СВЯЗЬ С ТЕГАМИ

  @@map("articles")
}

model Project {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       Json
  published     Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String
  author        User      @relation(fields: [authorId], references: [id])
  previewImage  Json?
  tags          Tag[]     // <-- СВЯЗЬ С ТЕГАМИ

  @@map("projects")
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  @@map("subscribers")
}

model Letter {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text
  published   Boolean   @default(false)
  publishedAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  tags        Tag[]     // <-- ДОБАВЛЯЕМ СВЯЗЬ С ТЕГАМИ
  
  @@map("letters")
}

// --- НОВАЯ МОДЕЛЬ ДЛЯ ТЕГОВ ---
model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  
  articles  Article[] // <-- Обратная связь со статьями
  projects  Project[] // <-- Обратная связь с проектами
  letters   Letter[]  // <-- ДОБАВЛЯЕМ ОБРАТНУЮ СВЯЗЬ С ПИСЬМАМИ

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// --- МОДЕЛИ ДЛЯ ФИЗИЧЕСКИХ ОТКРЫТОК ---
model Postcard {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  image       String   // URL изображения открытки
  price       Int      // Цена в копейках
  available   Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orders      PostcardOrder[]
  
  @@map("postcards")
}

model PostcardOrder {
  id            String   @id @default(cuid())
  postcardId    String
  postcard      Postcard @relation(fields: [postcardId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  // Контактная информация
  recipientName String
  address       String   @db.Text
  city          String
  postalCode    String
  country       String   @default("Russia")
  phone         String?
  
  // Персонализация
  customMessage String?  @db.Text
  
  // Оплата и статус
  status        PostcardOrderStatus @default(PENDING)
  stripePaymentIntentId String?
  amount        Int      // Цена на момент заказа
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  shippedAt     DateTime?
  deliveredAt   DateTime?
  
  @@map("postcard_orders")
}

enum PostcardOrderStatus {
  PENDING    // Ожидает оплаты
  PAID       // Оплачен
  PROCESSING // В обработке
  SHIPPED    // Отправлен
  DELIVERED  // Доставлен
  CANCELLED  // Отменен
}

// --- МОДЕЛЬ ПРОДУКТОВ УДАЛЕНА ---
// Убираем модель Product полностью
