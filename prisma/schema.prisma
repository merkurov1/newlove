// Этот файл — основа вашей схемы данных для Prisma.

// 1. Блок Datasource: Указывает, как Prisma подключается к вашей базе данных.
// Обязательно замените "postgresql" на ваш тип БД, если он другой (например, "mysql" или "sqlite").
// URL для подключения берется из переменной окружения DATABASE_URL.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2. Блок Generator: Указывает, какой клиент будет сгенерирован.
// В данном случае — Prisma Client для JavaScript/TypeScript.
generator client {
  provider = "prisma-client-js"
}

// --- МОДЕЛИ ДАННЫХ ---

// Модели для NextAuth.js (оставлены как в вашем примере)
model User {
  // ... ваши поля для модели User ...
  // Пример:
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  // ... ваши поля для модели Message ...
  // Пример:
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
}

// Модель для новостных статей (из внешних источников)
model NewsArticle {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?  @db.Text
  url         String   @unique
  imageUrl    String?
  publishedAt DateTime
  sourceName  String
  createdAt   DateTime @default(now())
}

// Модель для ваших регулярных публикаций
model Article {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("articles") // Указываем на вашу таблицу "articles"
}

// Модель для проектов/статичных страниц
model Project {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects") // Указываем на вашу таблицу "projects"
}
