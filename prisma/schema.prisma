// This block specifies the database connection.
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Используется приложением
  directUrl = env("DIRECT_URL")   // Используется для миграций Prisma
}

// This block tells Prisma to generate the Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
// Добавлено для управления ролями пользователей
enum Role {
  USER
  ADMIN
}

// --- DATA MODELS ---

// --- Модели для NextAuth.js ---
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Добавлено поле для определения прав доступа (Администратор/Пользователь)
  role          Role      @default(USER)

  // Связи с другими моделями
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  articles      Article[]
  projects      Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Модели вашего приложения ---

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsArticle {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?  @db.Text
  url         String   @unique
  imageUrl    String?
  publishedAt DateTime
  sourceName  String
  createdAt   DateTime @default(now())

  @@index([publishedAt])
}

model Article {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  
  // Добавлены поля для управления публикацией (черновики)
  published   Boolean  @default(false)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Добавлена связь с автором (User)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@map("articles")
}

model Project {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  
  // Добавлены поля для управления публикацией (черновики)
  published   Boolean  @default(false)
  publishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Добавлена связь с автором (User)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@map("projects")
}
