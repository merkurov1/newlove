'use client';

import { useState } from 'react';
import useSupabaseSession from '@/hooks/useSupabaseSession';
import Image from 'next/image';

interface Postcard {
  id: string;
  title: string;
  description: string;
  image: string;
  price: number;
  available: boolean;
  featured: boolean;
}

interface PostcardOrderFormProps {
  postcard: Postcard;
  onBack: () => void;
}

interface FormData {
  recipientName: string;
  streetAddress: string;
  addressLine2: string;
  city: string;
  stateProvince: string;
  postalCode: string;
  country: string;
  phone: string;
  customMessage: string;
}

export default function PostcardOrderForm({ postcard, onBack }: PostcardOrderFormProps) {
  const { session } = useSupabaseSession();
  const [formData, setFormData] = useState<FormData>({
  recipientName: session?.user?.name || '',
    streetAddress: '',
    addressLine2: '',
    city: '',
    stateProvince: '',
    postalCode: '',
    country: 'United Kingdom',
    phone: '',
    customMessage: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const formatPrice = (priceInPence: number) => {
    return `¬£${(priceInPence / 100).toFixed(0)}`;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const validateForm = () => {
    const required = ['recipientName', 'streetAddress', 'city', 'postalCode', 'country'];
    for (const field of required) {
      if (!formData[field as keyof FormData].trim()) {
        setError(`–ü–æ–ª–µ "${getFieldLabel(field)}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
        return false;
      }
    }
    return true;
  };

  const getFieldLabel = (field: string) => {
    const labels: Record<string, string> = {
      recipientName: '–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
      streetAddress: '–ê–¥—Ä–µ—Å',
      city: '–ì–æ—Ä–æ–¥',
      stateProvince: '–†–µ–≥–∏–æ–Ω/–®—Ç–∞—Ç',
      postalCode: '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å',
      country: '–°—Ç—Ä–∞–Ω–∞'
    };
    return labels[field] || field;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (!validateForm()) return;

    setLoading(true);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ Payment Intent
      const response = await fetch('/api/postcards/order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          postcardId: postcard.id,
          ...formData
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      }

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Stripe Elements
      if (data.paymentUrl) {
        window.location.href = data.paymentUrl;
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã');
      }

    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
      <button 
        onClick={onBack}
        className="flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
      >
        ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
      </button>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–µ */}
      <div className="bg-gray-50 rounded-lg p-4">
        <div className="flex gap-4">
          <div className="relative w-20 h-20 rounded-lg overflow-hidden flex-shrink-0">
            <Image
              src={postcard.image}
              alt={postcard.title}
              fill
              className="object-cover"
              sizes="80px"
            />
          </div>
          <div className="flex-1">
            <h3 className="font-semibold text-gray-900">{postcard.title}</h3>
            <p className="text-sm text-gray-600 mb-2">{postcard.description}</p>
            <div className="text-xl font-bold text-orange-600">
              {formatPrice(postcard.price)}
            </div>
          </div>
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ */}
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          
          {/* –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è */}
          <div className="sm:col-span-2">
            <label htmlFor="recipientName" className="block text-sm font-medium text-gray-700 mb-2">
              –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è *
            </label>
            <input
              type="text"
              id="recipientName"
              name="recipientName"
              value={formData.recipientName}
              onChange={handleInputChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="–ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É"
            />
          </div>

          {/* –ê–¥—Ä–µ—Å —Å—Ç—Ä–æ–∫–∞ 1 */}
          <div className="sm:col-span-2">
            <label htmlFor="streetAddress" className="block text-sm font-medium text-gray-700 mb-2">
              –ê–¥—Ä–µ—Å (—Å—Ç—Ä–æ–∫–∞ 1) *
            </label>
            <input
              type="text"
              id="streetAddress"
              name="streetAddress"
              value={formData.streetAddress}
              onChange={handleInputChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
            />
          </div>

          {/* –ê–¥—Ä–µ—Å —Å—Ç—Ä–æ–∫–∞ 2 */}
          <div className="sm:col-span-2">
            <label htmlFor="addressLine2" className="block text-sm font-medium text-gray-700 mb-2">
              –ê–¥—Ä–µ—Å (—Å—Ç—Ä–æ–∫–∞ 2)
            </label>
            <input
              type="text"
              id="addressLine2"
              name="addressLine2"
              value={formData.addressLine2}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="–†–∞–π–æ–Ω, –∫–æ–º–ø–ª–µ–∫—Å, –∫–æ—Ä–ø—É—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            />
          </div>

          {/* –ì–æ—Ä–æ–¥ */}
          <div>
            <label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-2">
              –ì–æ—Ä–æ–¥ *
            </label>
            <input
              type="text"
              id="city"
              name="city"
              value={formData.city}
              onChange={handleInputChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
          </div>

          {/* –†–µ–≥–∏–æ–Ω/–®—Ç–∞—Ç */}
          <div>
            <label htmlFor="stateProvince" className="block text-sm font-medium text-gray-700 mb-2">
              –†–µ–≥–∏–æ–Ω/–®—Ç–∞—Ç/–û–±–ª–∞—Å—Ç—å
            </label>
            <input
              type="text"
              id="stateProvince"
              name="stateProvince"
              value={formData.stateProvince}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="–î–ª—è –°–®–ê, –ö–∞–Ω–∞–¥—ã, –ò–Ω–¥–∏–∏ –∏ –¥—Ä."
            />
          </div>

          {/* –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å */}
          <div>
            <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700 mb-2">
              –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å *
            </label>
            <input
              type="text"
              id="postalCode"
              name="postalCode"
              value={formData.postalCode}
              onChange={handleInputChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="–§–æ—Ä–º–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∞–Ω—ã"
            />
          </div>

          {/* –°—Ç—Ä–∞–Ω–∞ */}
          <div>
            <label htmlFor="country" className="block text-sm font-medium text-gray-700 mb-2">
              –°—Ç—Ä–∞–Ω–∞ *
            </label>
            <select
              id="country"
              name="country"
              value={formData.country}
              onChange={handleInputChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            >
              <option value="United Kingdom">üá¨üáß United Kingdom</option>
              <option value="United States">üá∫üá∏ United States</option>
              <option value="Canada">üá®üá¶ Canada</option>
              <option value="Australia">üá¶üá∫ Australia</option>
              <option value="Germany">üá©üá™ Germany</option>
              <option value="France">üá´üá∑ France</option>
              <option value="Italy">üáÆüáπ Italy</option>
              <option value="Spain">üá™üá∏ Spain</option>
              <option value="Netherlands">üá≥üá± Netherlands</option>
              <option value="Belgium">üáßüá™ Belgium</option>
              <option value="Switzerland">üá®üá≠ Switzerland</option>
              <option value="Austria">üá¶üáπ Austria</option>
              <option value="Sweden">üá∏üá™ Sweden</option>
              <option value="Norway">üá≥üá¥ Norway</option>
              <option value="Denmark">üá©üá∞ Denmark</option>
              <option value="Finland">üá´üáÆ Finland</option>
              <option value="Japan">üáØüáµ Japan</option>
              <option value="South Korea">üá∞üá∑ South Korea</option>
              <option value="Singapore">üá∏üá¨ Singapore</option>
              <option value="New Zealand">üá≥üáø New Zealand</option>
              <option value="Russia">üá∑üá∫ Russia</option>
              <option value="Poland">üáµüá± Poland</option>
              <option value="Czech Republic">üá®üáø Czech Republic</option>
              <option value="Ireland">üáÆüá™ Ireland</option>
              <option value="Portugal">üáµüáπ Portugal</option>
              <option value="Other">üåç Other</option>
            </select>
          </div>

          {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">
              –¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              placeholder="+7 999 123-45-67"
            />
          </div>

          {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
          <div className="sm:col-span-2">
            <label htmlFor="customMessage" className="block text-sm font-medium text-gray-700 mb-2">
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </label>
            <textarea
              id="customMessage"
              name="customMessage"
              value={formData.customMessage}
              onChange={handleInputChange}
              rows={3}
              maxLength={200}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none"
              placeholder="–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)"
            />
            <div className="text-xs text-gray-500 mt-1">
              {formData.customMessage.length}/200 —Å–∏–º–≤–æ–ª–æ–≤
            </div>
          </div>
        </div>

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="text-red-800 text-sm">{error}</div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞ */}
        <div className="border-t border-gray-200 pt-6">
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-orange-600 text-white py-3 px-6 rounded-md font-medium hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? '–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...' : `–ó–∞–∫–∞–∑–∞—Ç—å –∑–∞ ${formatPrice(postcard.price)}`}
          </button>
          
          <p className="text-xs text-gray-500 text-center mt-3">
            –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Stripe
          </p>
        </div>
      </form>
    </div>
  );
}