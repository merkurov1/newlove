// app/api/generate-post/route.ts
import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from "@google/generative-ai";

// üõ°Ô∏è 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const GEMINI_KEY = process.env.GEMINI_API_KEY;
const CRON_SECRET = process.env.CRON_SECRET;

if (!SUPABASE_URL || !SUPABASE_KEY || !GEMINI_KEY || !CRON_SECRET) {
  throw new Error("Missing required environment variables.");
}

// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
const genAI = new GoogleGenerativeAI(GEMINI_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

// üìÑ 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥)
// –í—ã–Ω–æ—Å–∏–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞.
function createDigestPrompt(currentDate: string, currentMonth: string, currentYear: number): string {
  return `
    # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    –¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –º–∏—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞. 
    –°–æ–∑–¥–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≥–ª–∞–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –∫—É–ª—å—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ—Å—Ç–∞ –¥–ª—è Telegram.

    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–Ω–∞–ª–∏–∑—É –Ω–æ–≤–æ—Å—Ç–µ–π

    ## –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.
    - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${currentDate}.

    ## –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –∑–Ω–∞–Ω–∏—è—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö –∏–∑ —ç—Ç–∏—Ö –∏–∑–¥–∞–Ω–∏–π):
    The Guardian (Culture), The New York Times (Arts), The Art Newspaper, ARTNews, Le Monde (Culture), Le Figaro (Culture), The Washington Post (Arts), Artsy, Hyperallergic.

    ## –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–º—ã: –ú—É–∑–µ–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –ê—Ä—Ç-—Ä—ã–Ω–æ–∫, –°–º–µ—Ä—Ç–∏ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π, –°–∫–∞–Ω–¥–∞–ª—ã –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è, –ö—Ä—É–ø–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –ö–∏–Ω–æ –∏ —Ç–µ–∞—Ç—Ä, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ.
    –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏: –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å, –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å.

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞
    –í—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–≥–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ.

    üé® **–ò–°–ö–£–°–°–¢–í–û –ò –ö–£–õ–¨–¢–£–†–ê** | ${currentDate}
    üì∞ **–ì–õ–ê–í–ù–û–ï –ó–ê –î–ï–ù–¨:**

    [—ç–º–æ–¥–∑–∏] **[–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏]**
    [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å –∫–ª—é—á–µ–≤—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏]
    üìç *[–ò—Å—Ç–æ—á–Ω–∏–∫]*

    (–ü–æ–≤—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –±–ª–æ–∫ –¥–ª—è 5-7 –Ω–æ–≤–æ—Å—Ç–µ–π)

    ## –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
    - üèõÔ∏è –ú—É–∑–µ–∏ –∏ –≥–∞–ª–µ—Ä–µ–∏
    - üñºÔ∏è –í—ã—Å—Ç–∞–≤–∫–∏ –∏ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
    - üí∞ –ê—Ä—Ç-—Ä—ã–Ω–æ–∫ –∏ –∞—É–∫—Ü–∏–æ–Ω—ã
    - üé≠ –¢–µ–∞—Ç—Ä –∏ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å
    - üé¨ –ö–∏–Ω–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å–º—ã
    - üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
    - üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω
    - üíî –ù–µ–∫—Ä–æ–ª–æ–≥–∏
    - ‚öñÔ∏è –ü—Ä–∞–≤–æ–≤—ã–µ —Å–ø–æ—Ä—ã
    - üí° –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    ---
    üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: [—Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤]
    üì≤ *–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π*

    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É
    - –°—Ç–∏–ª—å: –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π.
    - –§–∞–∫—Ç—ã: –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: –æ—Ç 5 –¥–æ 7.
  `;
}

// üöÄ 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è API
export async function POST(request: Request) {
  // –ó–∞—â–∏—Ç–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
  const authHeader = request.headers.get('authorization');
  if (authHeader !== `Bearer ${CRON_SECRET}`) {
    return new Response('Unauthorized', { status: 401 });
  }

  try {
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç
    const today = new Date();
    const day = String(today.getDate()).padStart(2, '0');
    const monthNum = String(today.getMonth() + 1).padStart(2, '0');
    const year = today.getFullYear();
    const monthName = today.toLocaleString('en-US', { month: 'long' });
    const formattedDate = `${day}.${monthNum}.${year}`;

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞
    const prompt = createDigestPrompt(formattedDate, monthName, year);

    // –ó–∞–ø—Ä–æ—Å –∫ Gemini API
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const generatedContent = response.text();

    // ‚úîÔ∏è –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    if (!generatedContent || !generatedContent.includes('–ì–õ–ê–í–ù–û–ï –ó–ê –î–ï–ù–¨:')) {
        throw new Error("AI response is empty or doesn't match the required format.");
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase
    const dbTitle = `–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π: ${formattedDate}`;
    const dbSlug = `digest-${year}-${monthNum}-${day}`; 

    const { data, error } = await supabase
      .from('digests')
      .insert({ 
          title: dbTitle, 
          content: generatedContent,
          slug: dbSlug, 
          status: 'draft' 
      })
      .select()
      .single(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º .single() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞

    if (error) {
      if (error.code === '23505') { 
          console.warn(`Digest for ${dbSlug} already exists.`);
          return NextResponse.json({ success: true, message: 'Digest already exists, operation skipped' });
      }
      throw error; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤ –≥–ª–∞–≤–Ω—ã–π catch –±–ª–æ–∫
    }

    return NextResponse.json({ success: true, digest: data });

  } catch (e: any) {
    console.error('Full cycle error:', e);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–æ–π Supabase –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const errorMessage = e.message || 'Failed to generate or save digest';
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}
