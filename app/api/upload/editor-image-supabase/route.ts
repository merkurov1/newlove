import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/authOptions';
import { createClient } from '@supabase/supabase-js';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Supabase Storage –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞ Vercel
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(req: NextRequest) {
  console.log('üöÄ API /upload/editor-image-supabase: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const session = await getServerSession(authOptions);
    console.log('üë§ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      exists: !!session,
      userId: session?.user?.id,
      role: (session?.user as any)?.role,
      email: session?.user?.email
    });
  
    if (!session?.user || (session.user as any).role !== 'ADMIN') {
      console.log('üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
    }

    const formData = await req.formData();
    const file = formData.get('image') as File;
    console.log('üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', {
      name: file?.name,
      type: file?.type,
      size: file?.size
    });
    
    if (!file) {
      console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return NextResponse.json({ success: false, error: 'No file uploaded' }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.type);
      return NextResponse.json({ success: false, error: 'Invalid file type' }, { status: 400 });
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5MB)
    const maxSize = 5 * 1024 * 1024;
    if (file.size > maxSize) {
      console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size, '–±–∞–π—Ç');
      return NextResponse.json({ success: false, error: 'File too large' }, { status: 400 });
    }

    try {
      const arrayBuffer = await file.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);
      const filename = `editor-images/${Date.now()}-${file.name}`.replace(/\s+/g, '-');
      
      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤ Supabase Storage:', filename);
      
      const { data, error } = await supabase.storage
        .from('media')
        .upload(filename, buffer, {
          contentType: file.type,
          upsert: false
        });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Supabase Storage:', error);
        return NextResponse.json({ 
          success: false, 
          error: `Storage error: ${error.message}` 
        }, { status: 500 });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: urlData } = supabase.storage
        .from('media')
        .getPublicUrl(filename);

      const url = urlData.publicUrl;
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase:', {
        filename,
        url,
        size: file.size
      });

      return NextResponse.json({
        success: true,
        file: {
          url: url,
          name: filename,
          size: file.size,
          type: file.type
        }
      });
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Supabase:', error);
      return NextResponse.json({ 
        success: false, 
        error: `Failed to upload: ${(error as Error).message}` 
      }, { status: 500 });
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API:', error);
    return NextResponse.json({ 
      success: false, 
      error: `Internal server error: ${(error as Error).message}` 
    }, { status: 500 });
  }
}