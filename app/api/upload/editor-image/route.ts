export const dynamic = 'force-dynamic';
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/authOptions';

// Vercel –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ /public, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
import path from 'path';
import fs from 'fs/promises';
import os from 'os';

// –ù–∞ Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp, –ª–æ–∫–∞–ª—å–Ω–æ - /public/uploads
const UPLOAD_DIR = process.env.VERCEL 
  ? '/tmp/uploads' 
  : path.join(process.cwd(), 'public', 'uploads');

export async function POST(req: NextRequest) {
  console.log('üöÄ API /upload/editor-image: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞');
  console.log('üîß –°—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', {
    vercel: !!process.env.VERCEL,
    uploadDir: UPLOAD_DIR,
    platform: os.platform()
  });
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const session = await getServerSession(authOptions);
    console.log('üë§ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      exists: !!session,
      userId: session?.user?.id,
      role: (session?.user as any)?.role,
      email: session?.user?.email
    });
  
    if (!session?.user || (session.user as any).role !== 'ADMIN') {
      console.log('üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
    }

    const formData = await req.formData();
    const file = formData.get('image') as File;
    if (process.env.NODE_ENV === 'development') {
      console.log('üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', {
        name: file?.name,
        type: file?.type,
        size: file?.size
      });
    }
    
    if (!file) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ');
      }
      return NextResponse.json({ success: false, error: 'No file uploaded' }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      if (process.env.NODE_ENV === 'development') {
        console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.type);
      }
      return NextResponse.json({ success: false, error: 'Invalid file type' }, { status: 400 });
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5MB)
    const maxSize = 5 * 1024 * 1024;
    if (file.size > maxSize) {
      console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size, '–±–∞–π—Ç');
      return NextResponse.json({ success: false, error: 'File too large' }, { status: 400 });
    }

    try {
      const arrayBuffer = await file.arrayBuffer();
      const buffer = Buffer.from(arrayBuffer);
      const filename = `${Date.now()}-${file.name}`.replace(/\s+/g, '-');
      
      console.log('üìÇ –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:', UPLOAD_DIR);
      await fs.mkdir(UPLOAD_DIR, { recursive: true });
      
      const filePath = path.join(UPLOAD_DIR, filename);
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª –≤:', filePath);
      
      await fs.writeFile(filePath, buffer);
      
      // –ù–∞ Vercel —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞–∫ base64 –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      let url: string;
      if (process.env.VERCEL) {
        // –ù–∞ Vercel –≤–æ–∑–≤—Ä–∞—â–∞–µ–º base64 URL (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        const base64 = buffer.toString('base64');
        url = `data:${file.type};base64,${base64}`;
        console.log('üîó Vercel: –≤–æ–∑–≤—Ä–∞—â–∞—é base64 URL (—Ä–∞–∑–º–µ—Ä:', base64.length, '—Å–∏–º–≤–æ–ª–æ–≤)');
      } else {
        url = `/uploads/${filename}`;
        console.log('üîó –õ–æ–∫–∞–ª—å–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞—é —Ñ–∞–π–ª–æ–≤—ã–π URL:', url);
      }

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
        filename,
        size: file.size,
        urlType: process.env.VERCEL ? 'base64' : 'file'
      });

      return NextResponse.json({
        success: true,
        file: {
          url: url,
          name: filename,
          size: file.size,
          type: file.type
        }
      });
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        name: (error as Error).name,
        message: (error as Error).message,
        stack: (error as Error).stack?.split('\n').slice(0, 3)
      });
      return NextResponse.json({ 
        success: false, 
        error: `Failed to save file: ${(error as Error).message}` 
      }, { status: 500 });
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API:', error);
    return NextResponse.json({ 
      success: false, 
      error: `Internal server error: ${(error as Error).message}` 
    }, { status: 500 });
  }
}