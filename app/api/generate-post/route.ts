// app/api/generate-post/route.ts
import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from "@google/generative-ai";

// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

// 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function getFormattedDate() {
    const today = new Date();
    const options: Intl.DateTimeFormatOptions = { day: '2-digit', month: 'long', year: 'numeric' };
    return new Intl.DateTimeFormat('ru-RU', options).format(today);
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
 * –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
 * –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NewsAPI.
 * –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 'newsapi' –∫–ª–∏–µ–Ω—Ç: npm install newsapi
 */
async function fetchNewsFromSources(): Promise<string> {
    // –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ NEWS_API_KEY –≤ –≤–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env.local)
    const newsApiKey = process.env.NEWS_API_KEY;
    if (!newsApiKey) {
        throw new Error("NEWS_API_KEY is not set in environment variables");
    }
    
    // –ò—Å—Ç–æ—á–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–º. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω—ã –¥–ª—è NewsAPI.
    const sources = 'the-new-york-times, the-guardian-uk, hyperallergic.com, artnews.com'; // Artsy –∏ The Art Newspaper –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é NewsAPI

    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();

    try {
        // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç URL –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ SDK –∏–ª–∏ fetch –∫ NewsAPI
        const response = await fetch(
            `https://newsapi.org/v2/everything?q=art+OR+culture+OR+museum&domains=${sources}&from=${twentyFourHoursAgo}&sortBy=publishedAt&language=en&apiKey=${newsApiKey}`
        );
        const newsData = await response.json();

        if (newsData.status !== 'ok' || newsData.articles.length === 0) {
            console.warn('No articles found or API error:', newsData);
            return "–ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI
        return newsData.articles
            .slice(0, 15) // –ë–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º, —á—Ç–æ–±—ã AI –±—ã–ª–æ –∏–∑ —á–µ–≥–æ –≤—ã–±—Ä–∞—Ç—å
            .map((article: any) => 
                `###\nTITLE: ${article.title}\nURL: ${article.url}\nSOURCE: ${article.source.name}\nCONTENT: ${article.description || article.content || ''}\n###`
            )
            .join('\n\n');

    } catch (error) {
        console.error("Failed to fetch news:", error);
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π.";
    }
}


export async function POST(request: Request) {
  // 3. –ó–∞—â–∏—Ç–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const authHeader = request.headers.get('authorization');
  if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
    return new Response('Unauthorized', { status: 401 });
  }

  // --- –®–ê–ì 1: –°–ë–û–† –î–ê–ù–ù–´–• ---
  const rawNewsContent = await fetchNewsFromSources();
  if (rawNewsContent.includes("–ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ") || rawNewsContent.includes("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ")) {
      return NextResponse.json({ success: false, message: 'Could not fetch news to process.' }, { status: 500 });
  }

  // --- –®–ê–ì 2: –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –° –ü–û–ú–û–©–¨–Æ AI ---
  const currentDate = getFormattedDate();

  // 4. –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–û–ú–¢
  const prompt = `
# –ó–∞–¥–∞—á–∞
–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –∞—Ä—Ç-–¥–∞–π–¥–∂–µ—Å—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤—ã–±–µ—Ä–∏ 5 —Å–∞–º—ã—Ö –≥–ª–∞–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –º–∏—Ä–∞ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –∫—É–ª—å—Ç—É—Ä—ã.
–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.
–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –≤ –≤–∏–¥–µ —á–∏—Å—Ç–æ–≥–æ Markdown, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤, –∏–∑–≤–∏–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

# –ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π)
${rawNewsContent}

# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
- **–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π.
- **–¢–µ–º—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ:** –ö—Ä—É–ø–Ω—ã–µ –≤—ã—Å—Ç–∞–≤–∫–∏, –∞—Ä—Ç-—Ä—ã–Ω–æ–∫ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–æ–≤), –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –º—É–∑–µ—è—Ö, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, —Å–∫–∞–Ω–¥–∞–ª—ã –≤ –∞—Ä—Ç-–º–∏—Ä–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ, –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∏–Ω–æ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ.
- **–î–µ–π—Å—Ç–≤–∏–µ:** –í—ã–±–µ—Ä–∏ 5 —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ, –ø–µ—Ä–µ–ø–∏—à–∏ –∏—Ö –∫—Ä–∞—Ç–∫–æ –∏ –µ–º–∫–æ (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∏–∂–µ. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–°–¢–†–û–ì–û –°–õ–ï–î–û–í–ê–¢–¨)
–ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: \`##\` –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, \`###\` –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π, \`**–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç**\` –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤ –∏ \`[—Ç–µ–∫—Å—Ç](url)\` –¥–ª—è —Å—Å—ã–ª–æ–∫.

## –ù–æ–≤–æ—Å—Ç–∏ –æ—Ç ${currentDate}

---

### [–≠–º–æ–¥–∑–∏] [–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏]
–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–µ —Å—É—Ç—å —Å–æ–±—ã—Ç–∏—è, –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –µ–º–∫–∏–º.
**–ò—Å—Ç–æ—á–Ω–∏–∫:** [–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–∞–Ω–∏—è](–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é)

(–ü–æ–≤—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –±–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ 5 –Ω–æ–≤–æ—Å—Ç–µ–π. –ú–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤—Å—Ç–∞–≤–ª—è–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å \`---\`)

## –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:
- üèõÔ∏è –ú—É–∑–µ–∏ –∏ –≥–∞–ª–µ—Ä–µ–∏
- üñºÔ∏è –í—ã—Å—Ç–∞–≤–∫–∏
- üí∞ –ê—Ä—Ç-—Ä—ã–Ω–æ–∫ –∏ –∞—É–∫—Ü–∏–æ–Ω—ã
- üé≠ –¢–µ–∞—Ç—Ä –∏ –∫–∏–Ω–æ
- üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
- üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- üíî –ù–µ–∫—Ä–æ–ª–æ–≥–∏
- üí° –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ò–ò –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ
`;

  try {
    // 5. –ó–∞–ø—Ä–æ—Å –∫ Gemini API (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const generatedContent = response.text();

    if (!generatedContent || generatedContent.length < 100) {
        throw new Error("AI response is empty or too short.");
    }

    // 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const dbTitle = `–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç ${currentDate}`;
    const dbSlug = `digest-${new Date().toISOString().split('T')[0]}`;

    const { data, error } = await supabase
      .from('digests')
      .insert([
        { 
          title: dbTitle, 
          content: generatedContent,
          slug: dbSlug, 
          status: 'draft' 
        }
      ])
      .select();

    if (error) {
      if (error.code === '23505') { 
          console.warn(`Digest for ${dbSlug} already exists.`);
          return NextResponse.json({ success: false, message: 'Digest already exists' }, { status: 200 });
      }
      console.error('Supabase error:', error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    return NextResponse.json({ success: true, digest: data });

  } catch (e) {
    console.error('Full cycle error:', e);
    return NextResponse.json({ error: 'Failed to generate or save digest' }, { status: 500 });
  }
}
