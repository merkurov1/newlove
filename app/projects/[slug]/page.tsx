


import prisma from '@/lib/prisma';
import BlockRenderer from '@/components/BlockRenderer';
import type { EditorJsBlock } from '@/types/blocks';

export default async function ProjectPage({ params }: { params: { slug: string } }) {
  console.log('üîç ProjectPage: –ü–æ–ª—É—á–µ–Ω slug:', params.slug);
  
  const project = await prisma.project.findUnique({ 
    where: { 
      slug: params.slug,
      published: true  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    } 
  });
  
  console.log('üîç ProjectPage: –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç:', project ? `ID: ${project.id}, Title: ${project.title}` : '–ù–ï –ù–ê–ô–î–ï–ù');
  
  if (!project) {
    return (
      <div className="max-w-2xl mx-auto mt-16 p-6 bg-red-50 text-red-700 rounded shadow text-center">
        <h1 className="text-2xl font-bold mb-2">–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
        <p>–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.</p>
      </div>
    );
  }

  let blocks: EditorJsBlock[] = [];
  let debugInfo: any = {};
  
  console.log('üîç ProjectPage: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ë–î:', typeof project.content);
  console.log('üîç ProjectPage: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', JSON.stringify(project.content).substring(0, 200));
  
  try {
    debugInfo.rawContentType = typeof project.content;
    debugInfo.rawContent = project.content;
    
    const raw = typeof project.content === 'string' ? project.content : JSON.stringify(project.content);
    debugInfo.processedRaw = raw;
    
    const parsed = JSON.parse(raw);
    debugInfo.parsed = parsed;
    debugInfo.isArray = Array.isArray(parsed);
    
    console.log('üîç ProjectPage: –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, —ç—Ç–æ –º–∞—Å—Å–∏–≤?', Array.isArray(parsed));
    
    if (Array.isArray(parsed)) {
      blocks = parsed.filter(
        (b): b is EditorJsBlock =>
          b && typeof b.type === 'string' && b.data && typeof b.data === 'object'
      );
      debugInfo.filteredBlocks = blocks;
      debugInfo.filteredBlocksCount = blocks.length;
      
      console.log('üîç ProjectPage: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –±–ª–æ–∫–æ–≤:', blocks.length);
      blocks.forEach((block, i) => {
        console.log(`üîç ProjectPage: –ë–ª–æ–∫ ${i}: —Ç–∏–ø="${block.type}", –¥–∞–Ω–Ω—ã–µ:`, Object.keys(block.data || {}));
      });
    } else {
      console.log('üîç ProjectPage: –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', Object.keys(parsed));
    }
  } catch (error) {
    console.error('üîç ProjectPage: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    debugInfo.error = error instanceof Error ? error.message : String(error);
    // blocks –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
  }

  if (!blocks.length) {
    return (
      <div className="max-w-2xl mx-auto mt-16 p-6 bg-red-50 text-red-700 rounded shadow text-center">
        <h1 className="text-2xl font-bold mb-2">–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h1>
        <p>–ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</p>
      </div>
    );
  }

  return (
    <article className="max-w-3xl mx-auto px-4 py-12">
      <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 mb-8 text-center">{project.title}</h1>
      
      {/* –í–†–ï–ú–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
      <div className="mb-8 p-4 bg-blue-50 border border-blue-200 rounded">
        <h3 className="font-bold text-blue-800 mb-2">üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
        <div className="text-sm space-y-2">
          <div><strong>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ë–î:</strong> {debugInfo.rawContentType}</div>
          <div><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤:</strong> {debugInfo.filteredBlocksCount || 0}</div>
          {debugInfo.error && (
            <div className="text-red-600"><strong>–û—à–∏–±–∫–∞:</strong> {debugInfo.error}</div>
          )}
          <details className="mt-2">
            <summary className="cursor-pointer text-blue-600">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</summary>
            <pre className="mt-2 bg-white p-2 rounded text-xs overflow-auto max-h-40">
              {JSON.stringify(debugInfo, null, 2)}
            </pre>
          </details>
        </div>
      </div>
      
      <div className="prose prose-lg max-w-none mx-auto">
        <BlockRenderer blocks={blocks} />
      </div>
    </article>
  );
}