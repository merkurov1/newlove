#!/usr/bin/env node

/**
 * üõ°Ô∏è BULLETPROOF MIGRATION TOOLKIT
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  BACKUP_DIR: './backups',
  TIMEOUT: 30000, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é
  MAX_RETRIES: 3,
  ENVIRONMENTS: {
    development: process.env.DATABASE_URL || 'postgresql://localhost:5432/dev',
    production: process.env.DATABASE_URL_PROD || process.env.DATABASE_URL,
    staging: process.env.DATABASE_URL_STAGING || process.env.DATABASE_URL
  }
};

class MigrationToolkit {
  constructor() {
    this.ensureBackupDir();
    console.log('üõ°Ô∏è Migration Toolkit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // üìÅ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
  ensureBackupDir() {
    if (!fs.existsSync(CONFIG.BACKUP_DIR)) {
      fs.mkdirSync(CONFIG.BACKUP_DIR, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤: ${CONFIG.BACKUP_DIR}`);
    }
  }

  // üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  safeExec(command, options = {}) {
    const timeout = options.timeout || CONFIG.TIMEOUT;
    console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
    
    try {
      const result = execSync(command, {
        encoding: 'utf8',
        timeout: timeout,
        stdio: ['inherit', 'pipe', 'pipe'],
        ...options
      });
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      return { success: true, output: result };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:`, error.message);
      return { success: false, error: error.message };
    }
  }

  // üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
  async checkMigrationStatus() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    const result = this.safeExec('npx prisma migrate status', { timeout: 15000 });
    
    if (result.success) {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return { synced: true, output: result.output };
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –∏–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return { synced: false, error: result.error };
    }
  }

  // üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å—Ö–µ–º—ã (–ª–æ–∫–∞–ª—å–Ω–æ)
  createSchemaBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = path.join(CONFIG.BACKUP_DIR, `schema-backup-${timestamp}.prisma`);
    
    try {
      fs.copyFileSync('./prisma/schema.prisma', backupPath);
      console.log(`üíæ –ë—ç–∫–∞–ø —Å—Ö–µ–º—ã —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
      return backupPath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ —Å—Ö–µ–º—ã:', error.message);
      return null;
    }
  }

  // üì• –°–æ–∑–¥–∞–Ω–∏–µ SQL –±—ç–∫–∞–ø–∞ (–µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
  async createDatabaseBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = path.join(CONFIG.BACKUP_DIR, `db-backup-${timestamp}.sql`);
    
    console.log('üíæ –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å SQL –¥–∞–º–ø
    const result = this.safeExec(
      `npx prisma db pull --print > ${backupPath}`,
      { timeout: 20000 }
    );
    
    if (result.success && fs.existsSync(backupPath)) {
      console.log(`‚úÖ SQL –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
      return backupPath;
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SQL –±—ç–∫–∞–ø (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)');
      return null;
    }
  }

  // üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã Prisma
  validateSchema() {
    console.log('üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ö–µ–º—É Prisma...');
    
    const result = this.safeExec('npx prisma validate', { timeout: 10000 });
    
    if (result.success) {
      console.log('‚úÖ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∏ –≤ —Å—Ö–µ–º–µ:', result.error);
      return false;
    }
  }

  // üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client
  generateClient() {
    console.log('üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client...');
    
    const result = this.safeExec('npx prisma generate', { timeout: 30000 });
    
    if (result.success) {
      console.log('‚úÖ Prisma Client —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', result.error);
      return false;
    }
  }

  // üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
  async createMigration(name) {
    if (!name) {
      console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return false;
    }

    console.log(`üéØ –°–æ–∑–¥–∞—ë–º –º–∏–≥—Ä–∞—Ü–∏—é: ${name}`);
    
    // 1. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ö–µ–º—É
    if (!this.validateSchema()) {
      console.error('‚ùå –ü—Ä–µ—Ä—ã–≤–∞–µ–º: —Å—Ö–µ–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞');
      return false;
    }

    // 2. –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø—ã
    this.createSchemaBackup();
    await this.createDatabaseBackup();

    // 3. –°–æ–∑–¥–∞—ë–º –º–∏–≥—Ä–∞—Ü–∏—é
    const result = this.safeExec(
      `npx prisma migrate dev --name ${name} --create-only`,
      { timeout: 20000 }
    );

    if (result.success) {
      console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${name} —Å–æ–∑–¥–∞–Ω–∞ (–Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞)`);
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', result.error);
      return false;
    }
  }

  // ‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
  async deployMigrations() {
    console.log('‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // 1. –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø—ã
    this.createSchemaBackup();
    await this.createDatabaseBackup();

    // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    const result = this.safeExec('npx prisma migrate deploy', { timeout: 60000 });

    if (result.success) {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
      this.generateClient();
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', result.error);
      console.log('üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–∞—Ç–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      return false;
    }
  }

  // üîÑ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
  async fullWorkflow(migrationName) {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –†–ê–ë–û–ß–ï–ì–û –ü–†–û–¶–ï–°–°–ê');
    console.log('=' * 50);

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    const status = await this.checkMigrationStatus();
    console.log(`üìä –°—Ç–∞—Ç—É—Å –ë–î: ${status.synced ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' : '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`);

    // 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ö–µ–º—É
    if (!this.validateSchema()) {
      console.error('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è: —Å—Ö–µ–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞');
      return false;
    }

    // 3. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
    if (migrationName) {
      const created = await this.createMigration(migrationName);
      if (!created) {
        console.error('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
        return false;
      }
    }

    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    const deployed = await this.deployMigrations();
    if (!deployed) {
      console.error('üõë –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º–∏–≥—Ä–∞—Ü–∏–π');
      return false;
    }

    console.log('üéâ –ü–û–õ–ù–´–ô –†–ê–ë–û–ß–ò–ô –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!');
    return true;
  }

  // üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  showHelp() {
    console.log(`
üõ°Ô∏è MIGRATION TOOLKIT - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:
  node scripts/migration-toolkit.js status

üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã:
  node scripts/migration-toolkit.js validate

üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞:
  node scripts/migration-toolkit.js generate

üìã –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é:
  node scripts/migration-toolkit.js create <–∏–º—è>

‚ö° –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏:
  node scripts/migration-toolkit.js deploy

üöÄ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:
  node scripts/migration-toolkit.js workflow [–∏–º—è-–º–∏–≥—Ä–∞—Ü–∏–∏]

üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø:
  node scripts/migration-toolkit.js backup

üìã –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞:
  node scripts/migration-toolkit.js help
    `);
  }
}

// üéØ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const toolkit = new MigrationToolkit();
  const command = process.argv[2];
  const arg = process.argv[3];

  switch (command) {
    case 'status':
      await toolkit.checkMigrationStatus();
      break;
    
    case 'validate':
      toolkit.validateSchema();
      break;
    
    case 'generate':
      toolkit.generateClient();
      break;
    
    case 'create':
      await toolkit.createMigration(arg);
      break;
    
    case 'deploy':
      await toolkit.deployMigrations();
      break;
    
    case 'workflow':
      await toolkit.fullWorkflow(arg);
      break;
    
    case 'backup':
      toolkit.createSchemaBackup();
      await toolkit.createDatabaseBackup();
      break;
    
    case 'help':
    default:
      toolkit.showHelp();
      break;
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = MigrationToolkit;